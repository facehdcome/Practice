//动态内存+++++++++++++++++++++++++++++
//realloc
int mani()
{
	int* p =(int*)malloc(20);
	if (p == NULL)
	{
		printf("%s\n", strerror(errno));
	}
	else
	{
		int i = 0;
		for (i = 0; i < 5; i++)
		{
			*(p + i) = i;
		}
	}

	//假设20个字节不能满足我们的要求
	int* ptr = realloc(p, 40);
	if (ptr 1 = NULL)
	{
		p = ptr;
	}

	int i = 0;
	for (i = 5; i < 10; i++)
	{
		*(p + i) = i;
	}
	//打印
	for (i = 0; i < 10; i++)
	{
		printf("%d", *(p + i));
	}
	return 0;
}



//calloc初始化，空间
//int main()
//{
//	//开辟失败同样返回NULL
//	int* p = (int*)calloc(10, sizeof(int));
//	if (p == NULL)
//	{
//		printf("%s\n", strerror(errno));
//	}
//	else
//	{
//		int i = 0;
//		for (i = 0; i < 10; i++)
//		{
//			printf("%d ", *(p + i));
//		}
//	}
//
//	return 0;
//}




//malloc函数
//int main()
//{
//	int* p = (int* )malloc(10 * sizeof(int));//成功返回void* 失败返回NULL
//	if (p == NULL)
//	{
//		//打印错误原因的一个方式
//		printf("%s\n", strerror(errno));
//	}
//	else
//	{
//		//正常使用空间
//		int i = 0;
//		for (i = 0; i < 10; i++)
//		{
//			*(p + i) = i;
//		}
//
//		for (i = 0; i < 10; i++)
//		{
//			printf("%d\t", *(p + i));
//		}
//	}
//	//当动态申请的空间不再使用的时候就应该归还给操作系统
//	free(p);
//	p = NULL;//避免再次查找到那块空间
//	return 0;
//}
//动态内存+++++++++++++++++++++++++++++