//eleven_day
//杨氏矩阵 ：有一个数字矩阵，矩阵的每行从左到右是递增的，矩阵从上
//到下是递减的，请编写程序在这样的矩阵中查找某个数字是否存在
//时间复杂度小于o(N) （不能遍历数组）
/*
1	2	3
4	5	6
7	8	9
*/

void print(int  arr[3][3], int sz)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			printf(" %d ", arr[i][j]);
		}
		printf("\n");
	}
}
int FindNum(int arr[3][3], int k, int* px, int* py)
{
	int x = 0;
	int y = *py - 1;

	while (x <= *px - 1 && y >= 0)
	{
		if (arr[x][y] > k)
		{
			y--;
		}
		else if (arr[x][y] < k)
		{
			x++;
		}
		else
		{
			*py = y;
			*px = x;
			return 1;
		}
	}
	return 0;
}

int main()
{
	int  arr[3][3] = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };
	int sz = sizeof(arr) / sizeof(arr[0][0]);
	print(arr, sz);
	int x = 3;
	int y = 3;
	/*printf("%d", sz);*/
	int k = 0;

	printf("请输入数字：");
	scanf("%d", &k);
	int ret = FindNum(arr, k, &x, &y);					//传x,y的地址好打印下标
	if (ret == 0)
	{
		printf("没有找到%d\n", k);
	}
	else
		printf("找到了%d, 下标是 %d %d\n", k, x, y);
	return 0;
}




//判断字符串1是不是字符串2旋转后的字符， 字符串1 == 字符串2 ？ 1 ： 0
// 思路：ABCDEFG ABCDEFG 后面加一个相同的一组字符串 使用strstr() strncat()

#include <stdio.h>
#include <string.h>
int  is_left_move(char* str1, char* str2)
{
    int len1 = strlen(str1);
    int len2 = strlen(str2);

    if (len1 != len2)
        return 0;
    int len = strlen(str1);
    strncat(str1, str1, len-1 );
    char* ret = strstr(str1, str2);
    if (ret == NULL)
        return 0;
    else
        return 1;

}

int main()
{
    char arr[30] = "ABCDEFG";
    char arr2[] = "DEFGABC";

   int  ret =  is_left_move(arr, arr2);
   if (ret == 1)
   {
       printf("YES");
    }
   else
   {
       printf("NO");
   }

    return 0;
}




//方法二（三步翻转法）
/*
abcdefg
ba gfed
defg ab
*/
#include <stdio.h>
#include <string.h>
#include <assert.h>
void reverse(char* left, char* right)
{
    assert(left != NULL);
    assert(right != NULL);

    while (left < right)
    {
        char temp = *left;
        *left = *right;
        *right = temp;
        left++;
        right--;
    }
}

void is_lev_left(char* arr, int k)
{
    int len = strlen(arr);

    assert(arr);
    assert(k <= len);

    reverse(arr, arr + k-1);
    reverse(arr + k, arr + (len - 1));
    reverse(arr, arr + (len - 1));
}


int main()
{
    char arr[] = "ABCDEFG";
    printf("%s", arr);
    int k = 0;

    printf("请输入你想右旋几个字母：");
    scanf("%d", &k);
    is_lev_left(arr, k);
    printf("%s", arr);

    return 0;
}